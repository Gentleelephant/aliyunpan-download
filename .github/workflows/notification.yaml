name: Notification

on:
  push:
    branches:
      - 'main'
  schedule:
    - cron: "30 4 * * *"

jobs:
  notification:
    runs-on: ubuntu-latest

    env:
      MAIL_SENDER: ${{ secrets.MAIL_SENDER }} #发送方邮件地址
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }} #发送方邮件密码
      MAIL_PROTOCOL: ${{ secrets.MAIL_PROTOCOL }} #协议，例如smtp.qq.com
      MAIL_PROTOCOL_PORT: ${{ secrets.MAIL_PROTOCOL_PORT }} #协议端口
      MAIL_RECEIVER: ${{ secrets.MAIL_RECEIVER }} #接收方邮件地址

    steps:
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Checkout
        uses: actions/checkout@main

      - name: Install Dependency
        run: |
          python -m pip install --upgrade pip setuptools
          python -m pip install yagmail
          
      - name: Get Plan
        uses: jannekem/run-python-script-action@v1.2
        with:
          script: |
            import json
            from datetime import datetime, timedelta
            import os
            import yagmail
            
            class MemoryProgram:
              def __init__(self):
                self.plan = {}
            
              def addPlan(self, content, currentDate=None):
                if currentDate is None:
                  currentDate = datetime.now().date()
            
                reviewDates = [
                currentDate,
                currentDate + timedelta(days=1),
                currentDate + timedelta(days=2),
                currentDate + timedelta(days=4),
                currentDate + timedelta(days=7),
                currentDate + timedelta(days=15),
                currentDate + timedelta(days=30)
              ]
                date_key = currentDate.isoformat()
                if date_key not in self.plan:
                  self.plan[date_key] = {'content': [], 'reviewDates': []}
            
                if content not in self.plan[date_key]['content']:
                  self.plan[date_key]['content'].append(content)
                else:
                  print(f"计划 '{content}' 已经存在于 {date_key} 的计划中。")
            
                self.plan[date_key]['reviewDates'] = [date.isoformat() for date in reviewDates]
            
              def deletePlan(self, content, date=None):
                if date is None:
                  date = datetime.now().date()
                date_key = date.isoformat()
            
                if date_key in self.plan and content in self.plan[date_key]['content']:
                  self.plan[date_key]['content'].remove(content)
                  print(f"计划 '{content}' 已从 {date_key} 的计划中删除。")
                  if not self.plan[date_key]['content']:
                    del self.plan[date_key]
                    print(f"{date_key} 的所有计划已删除。")
                else:
                  print(f"未找到 {date_key} 的计划 '{content}'。")
            
              def getTodayReview(self):
                today = datetime.now().date().isoformat()
                todayReview = []
            
                for d, p in self.plan.items():
                  if today in p['reviewDates']:
                    todayReview.extend(p['content'])
            
                return todayReview
            
              def saveToFile(self, file_path):
                with open(file_path, 'w', encoding='utf-8') as file:
                  json.dump(self.plan, file, ensure_ascii=False, indent=4)
            
              def loadFromFile(self, file_path):
                if not os.path.exists(file_path):
                  self.saveToFile(file_path)  # 如果文件不存在，创建新文件并保存空数据
                else:
                  if os.path.getsize(file_path) > 0:  # 检查文件是否为空
                    with open(file_path, 'r', encoding='utf-8') as file:
                      self.plan = json.load(file)
            
            
            # 使用示例
            planSchema = MemoryProgram()
            
            # 从文件加载数据，如果文件不存在则创建新文件
            planSchema.loadFromFile("plan_data.json")

            # 
            todayReview = planSchema.getTodayReview()
            
            print('今日复习:',todayReview)
            
            if len(todayReview) > 0:
              yag = yagmail.SMTP(user='${{ env.MAIL_SENDER }}', password='${{ env.MAIL_PASSWORD }}', host='${{ env.MAIL_PROTOCOL }}')
              #
              yag.send(to='${{ env.MAIL_RECEIVER }}', subject='今日复习内容', contents=todayReview)