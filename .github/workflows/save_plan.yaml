name: Memory Helper
on:
  issues:
    types:
      - opened


jobs:
  build:
    runs-on: ubuntu-latest

    env:
      MAIL_SENDER: ${{ secrets.MAIL_SENDER }} #发送方邮件地址
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }} #发送方邮件密码
      MAIL_PROTOCOL: ${{ secrets.MAIL_PROTOCOL }} #协议，例如smtp.qq.com
      MAIL_PROTOCOL_PORT: ${{ secrets.MAIL_PROTOCOL_PORT }} #协议端口
      MAIL_RECEIVER: ${{ secrets.MAIL_RECEIVER }} #接收方邮件地址

    steps:
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Checkout
        uses: actions/checkout@main

      - name: Set env
        if: github.event_name == 'issues'
        uses: jannekem/run-python-script-action@v1.7
        with:
          script: |

            issueNumber = ${{ toJSON(github.event.issue.number) }}
            issueBody = '${{ toJSON(github.event.issue.body) }}'
            
            set_env('ISSUE_BODY', str(issueBody))
            set_env('ISSUE_TITLE', ${{ toJSON(github.event.issue.title) }})
            set_env('ISSUE_NUMBER', str(issueNumber))
            set_env('CLOUSE_ISSUE', '0')  

      - name: Save Plan
        uses: jannekem/run-python-script-action@v1.7
        with:
          script: |
            import json
            from datetime import datetime, timedelta
            import os
          
            class MemoryProgram:
              def __init__(self):
                self.plan = {}
              
              def addPlan(self, content, currentDate=None):
                if currentDate is None:
                  currentDate = datetime.now().date()
                
                reviewDates = [
                currentDate,
                currentDate + timedelta(days=1),
                currentDate + timedelta(days=2),
                currentDate + timedelta(days=4),
                currentDate + timedelta(days=7),
                currentDate + timedelta(days=15),
                currentDate + timedelta(days=30)
              ]
                date_key = currentDate.isoformat()
                if date_key not in self.plan:
                  self.plan[date_key] = {'content': [], 'reviewDates': []}
                
                if content not in self.plan[date_key]['content']:
                  self.plan[date_key]['content'].append(content)
                else:
                  print(f"计划 '{content}' 已经存在于 {date_key} 的计划中。")
                
                self.plan[date_key]['reviewDates'] = [date.isoformat() for date in reviewDates]
              
              def deletePlan(self, content, date=None):
                if date is None:
                  date = datetime.now().date()
                date_key = date.isoformat()
                
                if date_key in self.plan and content in self.plan[date_key]['content']:
                  self.plan[date_key]['content'].remove(content)
                  print(f"计划 '{content}' 已从 {date_key} 的计划中删除。")
                  if not self.plan[date_key]['content']:
                    del self.plan[date_key]
                    print(f"{date_key} 的所有计划已删除。")
                else:
                  print(f"未找到 {date_key} 的计划 '{content}'。")
              
              def getTodayReview(self):
                today = datetime.now().date().isoformat()
                todayReview = []
                
                for d, p in self.plan.items():
                  if today in p['reviewDates']:
                    todayReview.extend(p['content'])
                
                return todayReview
              
              def saveToFile(self, file_path):
                with open(file_path, 'w', encoding='utf-8') as file:
                  json.dump(self.plan, file, ensure_ascii=False, indent=4)
              
              def loadFromFile(self, file_path):
                if not os.path.exists(file_path):
                  self.saveToFile(file_path)  # 如果文件不存在，创建新文件并保存空数据
                else:
                  if os.path.getsize(file_path) > 0:  # 检查文件是否为空
                    with open(file_path, 'r', encoding='utf-8') as file:
                      self.plan = json.load(file)
            
            
            # 使用示例
            planSchema = MemoryProgram()
            
            # 从文件加载数据，如果文件不存在则创建新文件
            planSchema.loadFromFile("plan_data.json")

            if '${{ env.ISSUE_TITLE }}' == '创建计划':
              planSchema.addPlan('${{  env.ISSUE_BODY }}')
            elif '${{ env.ISSUE_TITLE }}' == '删除计划':
              planSchema.deletePlan('${{  env.ISSUE_BODY }}')
            elif '${{ env.ISSUE_TITLE }}' == '今日计划':
              set_env('CONTENT', str(planSchema.getTodayReview()))
            elif '${{ env.ISSUE_TITLE }}' == '所有计划':
              set_env('CONTENT', str(planSchema.plan))
            
            # 保存数据
            planSchema.saveToFile("plan_data.json")


#      TODO
      - name: Commit Data
        if: github.event_name == 'issues' && success() && !(env.ISSUE_TITLE == '今日计划'  || env.ISSUE_TITLE == '所有计划')
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "Update plan"
          git push

      - name: Create comment
        if: github.event_name == 'issues' && success() && (env.ISSUE_TITLE == '今日计划'  || env.ISSUE_TITLE == '所有计划')
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
                详细输出: ${{ env.CONTENT }}
                状态码: ${{ env.STATUS_CODE }}
            `
            })
      

      - name: Close issue
        if:  github.event_name == 'issues' && success()
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'close-issue'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ env.ISSUE_NUMBER }}
          close-reason: completed